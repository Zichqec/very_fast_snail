/*

Start the race and set variables
	Scale down
	Get the shell width _after_ scaling
	Decide how many px we move with each movement?
		Need to decide on the total time it's going to take overall first, to account for different width screens...
Go until a specified X position...
End the race
	Total up stuff
	Look at leaderboards

*/

OnDisplayChange
{
	DisplayWidth = reference1
}

OnDisplayHandover
{
	//Make a simple array for each character tracking the left and right boundary of the screen they are on
	//Left,Right.Top - WE ONLY NEED TOP IN ONE SPOT OK //TODO snip if unneeded
	WalkBorder = (TOINT(reference3[0]),TOINT(reference3[2]),TOINT(reference3[1]))
}

TimeCalc : all
{
	/*
		//The top one here is rounded... it's not quite perfect but that doesn't matter
		180,000		00-34	35		5000	175000
		120,000		35-64	30		4000	295000
		60,000		65-84	20		3000	355000
		30,000		85-99	15		2000	385000
		After 100 speed				1000
		
		Max should be 385000, plus any additional after 100 speed
	*/
	
	//TODO add negative speed option
	_stats = CurrentStats
	_initialval = TOINT(_stats[0])
	
	if _argv[0] != ""; _initialval = _argv[0]
	
	_speednum = _initialval
	if _initialval < 0; _speednum *= -1
	
	_speedcalc = (100,85,65,35)
	_speedmult = (1000,2000,3000,4000)
	_speedoutput = (0,0,0,0)
	
	for _i = 0; _i < ARRAYSIZE(_speedoutput); _i++
	{
		_threshold = _speedcalc[_i]
		if _speednum < _threshold; continue
		
		_speedoutput[_i] = _speednum - _threshold
		_speednum -= _speedoutput[_i]
		_speedoutput[_i] *= _speedmult[_i]
	}
	_speedoutput[4] = _speednum * 5000
	
	_total = _speedoutput[0] + _speedoutput[1] + _speedoutput[2] + _speedoutput[3] + _speedoutput[4]
	
	if _initialval < 0; _total *= -1
	
	//Race time max is 420000, so lets cap it...
	if _total > 417000; 417000
	else; _total
	
}

OnRace.Start : all
{
	"\![get,property,OnGetSnailPos,currentghost.scope(0).rect]"
}

OnGetSnailPos : all
{
	SnailPos = (reference0[0],reference0[1],0)
	TempWalkBorder = WalkBorder
	_scaling = 100
	"\p[3]\![set,alpha,0]\![set,scaling,%(_scaling)]\s[0]\![move,--x=0,--y=0,--base=0]\![set,alignmenttodesktop,bottom]\![get,property,OnGetTaskbarPos,currentghost.scope(3).rect]"
}

OnGetTaskbarPos : all
{
	SnailPos[2] = reference0[1]
	OnRace.Go
}

OnRace.Go : all
{
	_stats = CurrentStats
	
	_scaling = 20
	if TempWalkBorder == ""
	{
		WalkBorder = (0,DisplayWidth)
		TempWalkBorder = WalkBorder
	}
	
	//7 minute base race time
	_racetime = 420000 - TimeCalc
	_segmentlength = ABS(WalkBorder[1] - WalkBorder[0]) / 100
	_snailspeed = _racetime / 100
	
	//explode chance
	_explosiveness = TOINT(_stats[2])
	_explodetime = -1
	_rand = RAND(100)
	ErrorLog("_rand: %(_rand)","info")
	ErrorLog("_explosiveness: %(_explosiveness)","info")
	if _rand <= _explosiveness
	{
		_explodetime = RAND(99)
	}
	//TODO if CigaretteEquipped; _explodetime = 0
	
	//Positioning...
	"\0\t"
	if SnailPos[1] != SnailPos[2]; "\![move,,--y=%(SnailPos[2]),--time=1000,--base=primaryscreen]"
	
	"\![set,alignmenttodesktop,bottom]"
	//TODO check if the snail's scaling is going to be 100 and if so skip these...
	for _i = 100; _i >= _scaling; _i--
	{
		"\![set,scaling,%(_i)]\_w[20]"
	}
	"\![set,scaling,%(_scaling)]"
	
	if SnailPos[0] != TempWalkBorder[0]; "\![move,--x=%(TempWalkBorder[0]),--time=1500,--base=primaryscreen]"
	
	"\_w[500]"
	"\p[2]\![set,alpha,0]\s[2]\![set,scaling,%(_scaling)]\![move,--x-0,--y=0,--base=0,--option=ignore-sticky-window]"
	"\p[1]\![set,alpha,0]\s[2]\![set,scaling,%(_scaling)]\![move,--x-0,--y=0,--base=0,--option=ignore-sticky-window]"
	
	"\p[3]\![set,alpha,0]\s[2]\![move,--x=0,--base=0]"
	"\b[20]On your marks...\n\n Get set...\n\n \f[height,+10]\_qGO!!!\_q"
	"\0\s[2]\![embed,OnRace.Move,0,%(_racetime),%(_segmentlength),%(_snailspeed),%(_explodetime)]"
}

OnRace.Move : all
{
	_segment = reference0
	_racetime = reference1
	_segmentlength = reference2
	_snailspeed = reference3
	_explodetime = reference4
	_scaling = 20
	
	if _segment == 0; BalloonCloseTime = GETSECCOUNT
	
	//this feels clunky, maybe i could set up a couple if checks to make it not so weird...
	_finishpos = ""
	_finishpos += "\p[2]\![set,alpha,0]\![set,scaling,%(scaling)]\![move,--x-0,--y=0,--base=0,--option=ignore-sticky-window]"
	_finishpos += "\p[1]\![set,alpha,0]\![set,scaling,%(scaling)]\![move,--x-0,--y=0,--base=0,--option=ignore-sticky-window]"
	_finishpos += "\p[3]\b[-1]\0"
	
	_fadeout = ""
	for _i = 100; _i > 0; _i--
	{
		_fadeout += "\![set,alpha,%(_i)]\_w[20]"
	}
	_fadeout += "\![set,alpha,0]"
	
	
	if _segment >= _explodetime && _explodetime != -1
	{
		_finishpos
		"\0\![set,scaling,%(_scaling),-%(_scaling)]\s[4]" //TODO sooty overlay stuff, with layers that build up
		"\f[height,+10]\f[italic,1]%(boom)!!!\f[italic,default]\f[height,default]"
		"\x"
		_fadeout
		"\![raise,OnRace.Complete,explode,%(_racetime)]"
	}
	elseif _segment >= 99
	{
		_finishpos
		"\1\c\s[1]FINSHED!\x\0\t"
		_fadeout
		"\![raise,OnRace.Complete,complete,%(_racetime),%(GETSECCOUNT)]"
	}
	else
	{		
		if BalloonCloseTime > 0 && GETSECCOUNT - BalloonCloseTime > 7
		{
			BalloonCloseTime = -1
			"\p[3]\b[-1]\0"
		}
		
		"\![move,--X=%((TempWalkBorder[0] + (_segment * _segmentlength)) + _segmentlength),--time=%(_snailspeed),--base=primaryscreen]"
		"\![embed,OnRace.Move,%(_segment + 1),%(_racetime),%(_segmentlength),%(_snailspeed),%(_explodetime)]"
	}
}

OnRace.Complete : all
{
	_racetime = reference1
	_stats = CurrentStats
	_coolness = _stats[1]
	_exploded = 0
	if reference0 == "explode"; _exploded = 1
	_score = ScoreCalc(reference1 / 1000,_coolness,_exploded)
	
	TempLeaderboard ,= "%(_score),%(CurrentSnail.Name),%(_racetime),%(_coolness),%(_exploded),%(year)-%(leadingmonth)-%(leadingday):%(reference2)"
	"\![set,alpha,0]\![set,alignmenttodesktop,free]\![set,scaling,100]\![move,--x=%(SnailPos[0]),--y=%(SnailPos[1]),--base=primaryscreen]"
	"\p[2]\![set,alpha,0]\![set,scaling,100]\![move,--x-0,--y=0,--base=0,--option=ignore-sticky-window]"
	"\p[1]\![set,alpha,0]\![set,scaling,100]\![move,--x-0,--y=0,--base=0,--option=ignore-sticky-window]"
	"\0\s[1]"
	for _i = 0; _i < 100; _i++
	{
		"\![set,alpha,%(_i)]\_w[20]"
	}
	"\![set,alpha,100]"
	
	"\_q%(_score)\_q\n"
	if _exploded
	{
		"Explosive expulsion..."
	}
	else
	{
		"Verifiable victory." //TODO this is not final, i'll have to make it check for win or loss eventually too
	}
}

/*

Scoring:

Speed bonus/penalty

Start with 0 speed points, or a very small amount, for the normal 7 minutes of race time
There are minute barriers to break. Every minute barrier you break, you get a point bonus
Every second you shave off also gets you a certain amount of points, and the number it gives you increases for each minute barrier you break. That way, at high levels, eking out another second or two makes a large difference


Coolness

I'm thinking that coolness should be squared, that way it's not linear, it's uh... is that exponential? i'm not sure
I'm unsure if the score should be added to this or multiplied by this. probably added lol


Exploding might cut your score in half or quarter. Quarter probably better? will have to test
*/

ScoreCalc
{
	_time = _argv[0]
	_coolness = _argv[1]
	_exploded = _argv[2]
	
	//7 minute base race time
	_basetime = 420 //TODO do i want you to get 100 base points? make this 421 if so...
	_timesaved = _basetime - _time //TODO this can be negative, deal with later lol
	
	_timecalc = _timesaved
	
	_timeval = 1000
	_timemult = 1
	_timescore = 0
	
	//I feel there might be a cleaner way to do this but i can't be bothered...
	if _timecalc > 0
	{
		while _timecalc >= 60
		{
			_timescore += 60 * (_timeval * _timemult)
			_timemult++
			_timecalc -= 60
		}
		if _timecalc > 0; _timescore += _timecalc * (_timeval * _timemult)
	}
	else
	{
		_timeval = 500
		while _timecalc <= -60
		{
			_timescore -= 60 * (_timeval * _timemult)
			_timemult++
			_timecalc += 60
		}
		if _timecalc < 0; _timescore -= (_timecalc * -1) * (_timeval * _timemult)
	}
	
	_coolscore = 0
	_coolcalc = ABS(_coolness)
	_coolscore = _coolcalc * _coolcalc * _coolcalc
	if _coolness < 0
	{
		_coolscore *= -1
	}
	
	
	if _exploded
	{
		_coolscore -= ABS(_coolscore) / 2 //a quarter is really harsh...
		_timescore = 0
	}
	
	
	_score = _timescore + _coolscore
	
	//to make it Not So Crisp
	_spicestr = TOSTR(ABS(_score))
	_spice = 0
	if _score >= 0
	{
		for _i = 0; _i < STRLEN(_spicestr); _i++
		{
			_spice += TOINT(SUBSTR(_spicestr,_i,1))
		}
	}
	else
	{
		for _i = 0; _i < STRLEN(_spicestr); _i++
		{
			_spice -= TOINT(SUBSTR(_spicestr,_i,1))
		}
	}
	//_spice *= STRLEN(_spicestr)
	_score += _spice
	
	
	//"\_qScore: %(_score)\nSpice: %(_spice)\n%(GETTYPE(_spice))\n%(GETTYPE(_score))\x"
	_score
}