OnTranslate
{
	_talk = reference0
	
	//This is what makes %(embedded_elements) work in script input
	if reference1 == "" && reference2 == "" //If this is from the input box
	{ //send input box : no event (ref2) , no special flag (ref1)
		_talk = EVAL('"' + REPLACE(_talk,'"','""') + '"')
		_talk = OnTranslateInternal.AutoPause(_talk)
	}
	
	TOSTR(_talk)
}

OnTranslateInternal.AutoPause
{
	_talk = _argv[0]
	
	if "\![no-autopause]" !_in_ _talk
	{
		/*
		_talk = REPLACE(_talk,"... ",".\w4.\w4.\w8\w8 ") //Ellipsis
		_talk = REPLACE(_talk,"...? ",".\w4.\w4.\w4?\w8\w8 ") //Question mark + ellipsis
		_talk = REPLACE(_talk,"...! ",".\w4.\w4.\w4!\w8\w8 ") //Exclamation point + ellipsis
		*/
		
		_talk = REPLACE(_talk,"\n\n ","\n\n\w8\w8") //linebreak
		_talk = REPLACE(_talk,", ",",\w4 ") //Comma
		_talk = REPLACE(_talk,". ",".\w8\w8 ") //Period
		_talk = REPLACE(_talk,"? ","?\w8\w8 ") //Question mark
		_talk = REPLACE(_talk,"! ","!\w8\w8 ") //Exclamation point
		_talk = REPLACE(_talk,"; ",";\w4 ") //Semicolon
		//_talk = REPLACE(_talk,"- ","-\w8 ") //Dash - This one seems to happen a lot when I don't want it, so I am commenting it out
	}
	
	_talk
}

OnAnchorSelect
{
	if "http://" _in_ reference0 || "https://" _in_ reference0; "\j[""%(reference0)""]"
}

OnKeyPress
{
	if reference0 == "f1"; "\![open,readme]"
	elseif reference0 == "t"; OnAiTalk
	elseif reference0 == "r"; OnLastTalk
}

OnSurfaceRestore
{
	spongeoff
	--
	PositionInvisibleSnails
	--
	"\p[3]\![set,alpha,0]\s[0]"
	--
	"\0\s[0]"
	--
	CleanlinessCheck
	--
	LegalityCheck
}

OnWindowStateRestore
{
	"\1\s[-1]\0\s[0]"
	--
	LegalityCheck
}

On_homeurl
{
	"https://raw.githubusercontent.com/Zichqec/very_fast_snail/main/"
}

ghostver
{
	"1.0.0"
}

GenerateSnailChoices
{
	//ty terraria for inspiring me, but i'm using a different delimiter <3
	_id = ghostver + ":" + GenerateID
	_name = SnailNameGenerator(_id)
	_trait = traits(_name)
	
	"%(_id)%(C_BYTE1)%(_name)%(C_BYTE1)%(_trait)"
}

GenerateID : all
{
	"%(RAND(10))"
	"%(RAND(10))"
	"%(RAND(10))"
	"%(RAND(10))"
	"%(RAND(10))"
	"%(RAND(10))"
	"%(RAND(10))"
	"%(RAND(10))"
	"%(RAND(10))"
	"%(RAND(10))"
	"%(RAND(10))"
	"%(RAND(10))"
	"%(RAND(10))"
	"%(RAND(10))"
	"%(RAND(10))"
	"%(RAND(10))"
}

CreateSnail
{
	CurrentSnail.ID = _argv[0]
	CurrentSnail.Name = _argv[1]
	CurrentSnail.Version = ghostver
	CurrentSnail.Trait = _argv[2]
	CurrentSnail.TotalRaces = 0
	CurrentSnail.TotalRaceTime = 0
	CurrentSnail.HighestCoolness = 0
	CurrentSnail.TotalCrashes = 0
	CurrentSnail.Loadout = IARRAY
	CurrentSnail.DateSponsored = "%(year)-%(leadingmonth)-%(leadingday):%(GETSECCOUNT)"
	CurrentSnail.Notes = IARRAY
	CurrentSnail.Training = (0,0,0,0,0,0,0,0,0,0)
	SaveSnail(_argv[0])
}

GetSnailIndex
{
	ASEARCH(_argv[0],SavedSnails.ID)
}

SaveSnail
{
	_index = GetSnailIndex(_argv[0])
	if _index == -1; _index = ARRAYSIZE(SavedSnails.ID)
	
	SavedSnails.ID[_index] = CurrentSnail.ID
	SavedSnails.Name[_index] = CurrentSnail.Name
	SavedSnails.Version[_index] = CurrentSnail.Version
	SavedSnails.Trait[_index] = CurrentSnail.Trait
	SavedSnails.TotalRaces[_index] = CurrentSnail.TotalRaces
	SavedSnails.TotalRaceTime[_index] = CurrentSnail.TotalRaceTime
	SavedSnails.HighestCoolness[_index] = CurrentSnail.HighestCoolness
	SavedSnails.TotalCrashes[_index] = CurrentSnail.TotalCrashes
	
	_loadout = ""
	foreach CurrentSnail.Loadout; _item
	{
		if _loadout != ""; _loadout += "|"
		_loadout += _item
	}
	SavedSnails.Loadout[_index] = _loadout
	
	_notes = ""
	foreach CurrentSnail.Notes; _note
	{
		if _notes != ""; _notes += "|"
		_notes += _note
	}
	SavedSnails.Notes[_index] = _notes
	
	SavedSnails.DateSponsored[_index] = CurrentSnail.DateSponsored
	if CurrentSnail.Training == "" //This was added in an update so we need to account for if it doesn't exist
	{
		CurrentSnail.Training = (0,0,0,0,0,0,0,0,0,0)
	}
	else
	{
		SavedSnails.Training = TOSTR(CurrentSnail.Training)
	}
	
}

LoadSnail
{
	_index = GetSnailIndex(_argv[0])
	if _index == -1; _index = 0
	
	_snaildata = SPLIT(SavedSnails[_index],"|")
	
	CurrentSnail.ID = SavedSnails.ID[_index]
	CurrentSnail.Name = SavedSnails.Name[_index]
	CurrentSnail.Version = SavedSnails.Version[_index]
	CurrentSnail.Trait = SavedSnails.Trait[_index]
	CurrentSnail.TotalRaces = SavedSnails.TotalRaces[_index]
	CurrentSnail.TotalRaceTime = SavedSnails.TotalRaceTime[_index]
	CurrentSnail.HighestCoolness = SavedSnails.HighestCoolness[_index]
	CurrentSnail.TotalCrashes = SavedSnails.TotalCrashes[_index]
	
	CurrentSnail.Loadout = SPLIT(SavedSnails.Loadout[_index],"|")
	CurrentSnail.Notes = SPLIT(SavedSnails.Notes[_index],"|")
	
	CurrentSnail.DateSponsored = SavedSnails.DateSponsored[_index]
	CurrentSnail.Training = SPLIT(SavedSnails.Training,",")
	if CurrentSnail.Training == "" //This was added in an update so we need to account for if it doesn't exist
	{
		CurrentSnail.Training = (0,0,0,0,0,0,0,0,0,0)
	}
	else //if it exists make it ints
	{
		for _i = 0; _i < ARRAYSIZE(CurrentSnail.Training); _i++
		{
			CurrentSnail.Training[_i] = TOINT(CurrentSnail.Training[_i])
		}
	}
}




OnNotifyDressupInfo
{
	Dressups.Current = IARRAY
	Dressups.Available = IARRAY
	Dressups.Categories = IARRAY
	
	foreach reference; _ref
	{
		//character, category, part, options, on/off, thumbnail
		if _ref[4,C_BYTE1] == "1"; Dressups.Current ,= "%(_ref[1,C_BYTE1]),%(_ref[2,C_BYTE1])"
		Dressups.Available ,= _ref
		
		if ASEARCH(_ref[1,C_BYTE1],Dressups.Categories) == -1; Dressups.Categories ,= _ref[1,C_BYTE1]
	}
}

IsOwned
{
	//category, name
	_key = "%(_argv[0]),%(_argv[1])"
	
	if ASEARCH(_key,PurchasedItems) != -1; 1
	else; 0
}

CurrentStats
{
	_array = Dressups.Current
	if _argv[0] == "loadout"; _array = CurrentSnail.Loadout
	
	
	_cost = 0
	_speed = 0
	_coolness = 0
	_explosiveness = 0
	_count = 0
	foreach _array; _dressup
	{
		foreach ItemDetails; _item
		{
			if _item[0] == _dressup[0] && _item[1] == _dressup[1]
			{
				//Category,Name,Unlocked,Price,Speed,Coolness,Explosiveness
				_speed += TOINT(_item[4])
				_coolness += TOINT(_item[5])
				_explosiveness += TOINT(_item[6])
				if !IsOwned(_dressup[0],_dressup[1])
				{
					_cost += TOINT(_item[3])
					_count++
				}
			}
		}
	}
	
	_cleanliness = ABS(Cleanliness)
	if Cleanliness >= 10
	{
		_speed += 5
		_coolness += 5
		_explosiveness -= 5
	}
	elseif Cleanliness >= 5
	{
		_speed += 2
		_coolness += 2
		_explosiveness -= 2
	}
	elseif Cleanliness < 0
	{
		_speed -= _cleanliness
		_coolness -= _cleanliness
		_explosiveness += _cleanliness
	}
	if Cleanliness == -10
	{
		_coolness += 20 //cancelling out the -10 from earlier and adding another 10
	}
	
	(_speed,_coolness,_explosiveness,_cost,_count)
}

leadingmonth : all
{
	if month <= 9; "0"
	month
}

leadingday : all
{
	if day <= 9; "0"
	day
}

TimeDisplay : all
{
	_time = TOINT(_argv[0])
	
	_days = _time / 86400
	_time %= 86400
	_hours = _time / 3600
	_time %= 3600
	_minutes = _time / 60
	_seconds = _time % 60
	
	if _days > 0; "%(_days)d "
	if _hours <= 9; "0"
	"%(_hours):"
	if _minutes <= 9; "0"
	"%(_minutes):"
	if _seconds <= 9; "0"
	"%(_seconds)"
}

MinutesSeconds : all
{
	_time = TOINT(_argv[0])
	
	_minutes = _time / 60
	_seconds = _time % 60
	
	if _minutes <= 9; "0"
	"%(_minutes):"
	if _seconds <= 9; "0"
	"%(_seconds)"
}

TimeDisplayWord
{
	_num = TOINT(_argv[0])
	if _num <= 0; {"no time"; return}
	
	//Singular form, plural form, number of seconds
	_units = ( /
	//"millenium,millenia,31536000000",/
	//"century,centuries,3153600000",/
	//"decade,decades,315360000",/
	//"year,years,31536000",/
	//"day,days,86400",/
	"hour,hours,3600",/
	"minute,minutes,60",/
	"second,seconds,1"/
	)
	
	_output = ""
	foreach _units; _unit
	{
		_duration = TOINT(_unit[2])
		_amt = _num / _duration
		_num = _num % _duration
		
		if _amt > 0
		{
			if _output != ""
			{
				if _num == 0
				{
					if "," _in_ _output; _output += ","
					_output += " and "
				}
				else; _output += ", "
			}
			
			//The second function call here handles whether the unit name should be displayed as plural or not, depending on if the amount of that unit is greater than 1
			_output += "%(_amt) %(_unit[_amt > 1])"
		}
		if _num <= 0; break
	}
	_output
}

ABS
{
	if _argv[0] < 0; _argv[0] *= -1
	_argv[0]
}

IsAlliterative
{
	_input = _argv[0]
	_chunks = REPLACE(_input,"-"," ")
	_chunks = SPLIT(_chunks," ")
	
	_letter = TOLOWER(SUBSTR(_input,0,1))
	
	foreach _chunks; _chunk
	{
		if TOLOWER(SUBSTR(_chunk,0,1)) != _letter
		{
			0
			return
		}
	}
	1
}

//snail talk rate change
snail
{
	"\![set,balloonwait,1.7]"
}

snailend
{
	"\![set,balloonwait,1]"
}

LegalityCheck : all
{
	foreach Dressups.Current; _dressup
	{
		if _dressup[0] == "Overlays"; continue
		if !IsOwned(_dressup[0],_dressup[1])
		{
			"\![bind,%(_dressup[0]),%(_dressup[1]),0]"
		}
	}
}

L
{
	"\f[strike,1]L\f[strike,default]"
}

OnMinuteChange
{
	Lettuce++ //freebie lettuce gain
}

br
{
    if SHIORI3FW.BalloonName == "Very Fast Speedway"; "\n"
    else; " "
}

LeadingDigit : all
{
	_digit = _argv[0]
	if _digit < 10; "0"
	_digit
}

OnChoiceHover : all
{
	if reference1 == "OnEquipMenu.ToggleItem"
	{
		"\C"
		EquipMenu.ShopControls(reference2,reference3)
	}
}

OnAnchorHover : all
{
	if reference1 == "OnEquipMenu.ToggleItem"
	{
		"\C"
		EquipMenu.ShopControls(reference2,reference3)
	}
}

//ErrorLog("Some debug info","info")
ErrorLog
{
	//Create arrays if none exist
	if !ISVAR("ErrorsToPush.level"); ErrorsToPush.level = IARRAY
	if !ISVAR("ErrorsToPush.description"); ErrorsToPush.description = IARRAY
	
	_level = "warning" //It defaults to warning if it doesn't recognize what you've put in, so I will too
	if _argv[1] != ""; _level = _argv[1]
	
	ErrorsToPush.level ,= _level
	ErrorsToPush.description ,= _argv[0]
}

OnSecondChange
{
	if SHIORI3FW.DebugMode
	{
		//error logging stuff because i think tama is causing me trouble...
		//Create arrays if none exist
		if !ISVAR("ErrorsToPush.level"); ErrorsToPush.level = IARRAY
		if !ISVAR("ErrorsToPush.description"); ErrorsToPush.description = IARRAY

		if ARRAYSIZE(ErrorsToPush.level) > 0 //If there are errors
		{
			_levels = ""
			_descriptions = ""
			for _i = 0; _i < ARRAYSIZE(ErrorsToPush.level); _i++ //CHR(1) in here is the divider between errors
			{
				if _i > 0; {_levels += CHR(1); _descriptions += CHR(1)}
				_levels += ErrorsToPush.level[_i]
				_descriptions += ErrorsToPush.description[_i]
			}
			//Push the whole list of errors together
			SHIORI3FW.PushAdditionalReturn('ErrorLevel',_levels)
			SHIORI3FW.PushAdditionalReturn('ErrorDescription',_descriptions)
			
			//Clear the arrays so we don't send any more errors later
			ErrorsToPush.level = IARRAY
			ErrorsToPush.description = IARRAY
		}
	}
}

ShowInvisibleSnails : all
{
	"\p[3]\s[0]\![set,alpha,75]"
	"\p[2]\s[0]\![set,alpha,75]"
	"\p[1]\s[0]\![set,alpha,75]"
}

PositionInvisibleSnails : all
{
	"\p[2]\![set,alpha,0]\s[0]\![move,--x=0,--y=0,--base=0,--option=ignore-sticky-window]"
	"\1\![set,alpha,0]\s[0]\![move,--x=0,--y=0,--base=0,--option=ignore-sticky-window]"
}

spongebasic
{
	"\![set,property,currentghost.seriko.cursor.scope(0).mouseuplist(shell).path,spongebasic.cur]"
}

spongebetter
{
	"\![set,property,currentghost.seriko.cursor.scope(0).mouseuplist(shell).path,spongebetter.cur]"
}

spongeoff
{
	"\![set,property,currentghost.seriko.cursor.scope(0).mouseuplist(shell).path,]"
}

CleanlinessCheck : all
{
	"\![bind,Overlays,Soot Light,0]"
	"\![bind,Overlays,Soot Medium,0]"
	"\![bind,Overlays,Soot Heavy,0]"
	"\![bind,Overlays,Shine,0]"
	"\![bind,Overlays,Sparkles,0]"
	
	if Cleanliness <= -10
	{
		"\![bind,Overlays,Soot Heavy,1]"
		"\![bind,Overlays,Soot Medium,1]"
		"\![bind,Overlays,Soot Light,1]"
	}
	elseif Cleanliness <= -7
	{
		"\![bind,Overlays,Soot Heavy,1]"
		"\![bind,Overlays,Soot Light,1]"
	}
	if Cleanliness <= -5
	{
		"\![bind,Overlays,Soot Heavy,1]"
	}
	elseif Cleanliness <= -3
	{
		"\![bind,Overlays,Soot Medium,1]"
	}
	elseif Cleanliness <= -1
	{
		"\![bind,Overlays,Soot Light,1]"
	}
	
	if Cleanliness >= 5
	{
		"\![bind,Overlays,Shine,1]"
	}
	if Cleanliness >= 10
	{
		"\![bind,Overlays,Sparkles,1]"
	}
}

boing : all
{
	for _i = 100; _i >= 70; _i--
	{
		"\![set,scaling,100,%(_i)]\_w[3]"
	}
	for _i = 70; _i < 110; _i++
	{
		"\![set,scaling,100,%(_i)]\_w[3]"
	}
	for _i = 110; _i >= 100; _i--
	{
		"\![set,scaling,100,%(_i)]\_w[3]"
	}
	"\![set,scaling,100,100]"
}

bigheader : all
{
	"\f[bold,1]"
	"\f[italic,1]"
	"\f[align,center]"
	"\f[height,+2]"
	"%(_argv[0])"
	"\f[height,default]"
	"\n"
	"\f[align,left]"
	"\f[italic,default]"
	"\f[bold,default]"
	"\n"
}

TrainingCost
{
	_times_trained = _argv[0]
	
	(_times_trained * 100) + 100
}

TrainingTime
{
	_times_trained = _argv[0]
	
	(_times_trained * 10) + 10
}

newline
{
	"\n[0]"
}

//—————————————————————————————— Right click menu links ——————————————————————————————

//Takes an array of alternating names and urls, and formats them for use with the right click menu
FormatLinks : all
{
	for _i = 0; _i < ARRAYSIZE(_argv); _i++
	{
		_argv[_i] //Add the link/title
		//Alternate between adding %ASC(1) or %ASC(2)
		if _i % 2 == 1; "%ASC(2)"
		else; "%ASC(1)"
	}
}

On_sakura.recommendsites
{
	FormatLinks(recommendsites_sakura)
}

recommendsites_sakura : array
{
	"Link label";	"https://link.example.com/link/to/whatever/here/"
}

On_sakura.portalsites 
{
	FormatLinks(portalsites_sakura)
}

portalsites_sakura : array
{
	"Another link label";	"https://link.example.com/link/to/whatever/here/again/"
	"A third link label";	"https://link.example.com/link/to/whatever/a/third/time/you/can/add/as/many/as/you/want/"
}